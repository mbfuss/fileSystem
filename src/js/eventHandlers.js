// Экспортируемая функция addEventHandlers добавляет обработчики событий к элементам управления на странице
// Параметры:
// - sortOrderSlider: элемент слайдера, который используется для изменения порядка сортировки
// - cancelButton: кнопка, которая используется для возврата к предыдущей директории
// - fetchData: функция, которая делает запрос на сервер для получения списка файлов и обновления таблицы
// - navigateBack: функция, которая обрабатывает возврат к предыдущей директории
// - currentRoot: текущий путь, который используется для запроса данных с сервера

export const addEventHandlers = (sortOrderSlider, cancelButton, fetchData, navigateBack, currentRoot) => {

    // Добавляем обработчик события 'input' к слайдеру сортировки
    // Этот обработчик срабатывает каждый раз, когда пользователь изменяет положение слайдера
    sortOrderSlider.addEventListener('input', () => {
        // Определяем порядок сортировки на основе значения слайдера
        // Если значение слайдера равно "0", устанавливаем порядок сортировки 'desc' (по убыванию)
        // В противном случае устанавливаем порядок сортировки 'asc' (по возрастанию)
        const sortOrder = sortOrderSlider.value === "0" ? "desc" : "asc";

        // Вызываем функцию fetchData, чтобы получить данные с сервера с новым порядком сортировки
        // Параметры:
        // - currentRoot: текущий путь
        // - sortOrder: новый порядок сортировки ('asc' или 'desc')
        fetchData(currentRoot, sortOrder);
    });

    // Добавляем обработчик события 'click' к кнопке отмены
    // Этот обработчик срабатывает каждый раз, когда пользователь нажимает на кнопку "Назад"
    cancelButton.addEventListener('click', navigateBack);
    // Параметр navigateBack передается как ссылка на функцию
    // поэтому она будет вызвана, когда произойдет событие 'click'
};
